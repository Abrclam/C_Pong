
#include <allegro5/allegro.h>
#include<allegro5\allegro_primitives.h>
#include<allegro5\allegro_font.h>
#include<allegro5/allegro_ttf.h>
#include<iostream>
using namespace std;
//constants: variables that shouldn't change once the game starts
const float FPS = 60;
const int SCREEN_W = 800;
const int SCREEN_H = 800;
int num1;
int num2;
int num3;
int p1score = 0;
int p2score = 0;
//const char p1Score = 0;
//const char p2Score = 0;
//enumeration to help you remember what numbers represent which directions
enum MYKEYS {
	KEY_W, KEY_S, KEY_UP, KEY_DOWN
};

int main()
{
	//set up allegro
	al_init();
	al_install_keyboard();
	al_init_primitives_addon();
	al_init_font_addon();
	al_init_ttf_addon();
	srand(time(NULL));
	//set up game screen, event queue, and timer
	ALLEGRO_DISPLAY* display = al_create_display(SCREEN_W, SCREEN_H);
	ALLEGRO_FONT* font = al_load_font("sponge.ttf", 25, 0);
	ALLEGRO_EVENT_QUEUE* event_queue = al_create_event_queue();
	ALLEGRO_TIMER* timer = al_create_timer(1.0 / FPS);
	al_start_timer(timer);

	//position of player
	
	double yPos = 350;
	double xPos = 50;
	double yPos2 = 350;
	double xPos2 = 780;
	double ballX = 400;
	double ballY = 380;
	double ballVel = 4;
	double ballYVel=4;
	//game variables
	bool key[4] = { false, false,false,false }; //holds key clicks
	bool redraw = true; //variable needed for render section
	bool doexit = false; //handles game loop


	//tell event queue what to look for
	al_register_event_source(event_queue, al_get_display_event_source(display));
	al_register_event_source(event_queue, al_get_timer_event_source(timer));
	al_register_event_source(event_queue, al_get_keyboard_event_source());




	while (!doexit)//game loop!
	{
		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);
		
		num1= rand() % 255 + 1;
		num2 = rand() % 255 + 1;
		num3 = rand() % 255 + 1;
		//timer (physics) section////////////////////////////////////////
		if (ev.type == ALLEGRO_EVENT_TIMER) {

			//move player 4 pixels in a direction when key is pressed
			if (key[KEY_W]&&yPos>=0) {
				yPos -= 4.5;
			}

			if (key[KEY_S]&&yPos<=700) {
				yPos += 4.5;
			}

			if (key[KEY_UP]&&yPos2>=0) {
				yPos2 -=4.5;
			}

			if (key[KEY_DOWN]&&yPos2<=700) {
				yPos2 += 4.5;
			}
			
			ballX += ballVel;
			ballY += ballYVel;
			
			if (ballX >= 780) {
				ballVel *= -1;
				p1score++;
				cout << "Player 1 scores!" << endl;
				cout << "Score: " << p1score << " - " << p2score << endl;
			}
			if (ballX <= 0) {
				ballVel *= -1;
				p2score++;
				cout << "Player 2 scores!" << endl;
				cout << "Score: " << p1score << " - " << p2score << endl;
			}
			if (ballY >= 780)
				ballYVel *= -1;

			if (ballY <= 0)
				ballYVel *= -1;

			if (ballX < xPos  && ballY > yPos&& ballY < yPos + 100)
				ballVel *= -1;

			if (ballX > xPos2 -50&& ballY > yPos2&& ballY < yPos2 + 100)
				ballVel *= -1;

			redraw = true;
		}

		//keyboard and screen sections//////////////////////////////////////////
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_W:
				key[KEY_W] = true;
				break;

			case ALLEGRO_KEY_S:
				key[KEY_S] = true;
				break;
			
			case ALLEGRO_KEY_UP:
				key[KEY_UP] = true;
				break;

			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = true;
				break;
			}
		}
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_W:
				key[KEY_W] = false;
				break;

			case ALLEGRO_KEY_S:
				key[KEY_S] = false;
				break;

			case ALLEGRO_KEY_UP:
				key[KEY_UP] = false;
				break;
			
			case ALLEGRO_KEY_DOWN:
				key[KEY_DOWN] = false;
				break;

			case ALLEGRO_KEY_ESCAPE:
				doexit = true;
				break;
			}
		}

		//render section//////////////////////////////////////////////////
		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;

			al_clear_to_color(al_map_rgb(num2, num1, num3)); //wipe screen black between drawing (without this things smear)

			al_draw_filled_rectangle(xPos, yPos, xPos-30, yPos+100,al_map_rgb(0, 0, 0)); //draw the player
			al_draw_filled_rectangle(xPos2, yPos2, xPos2-30, yPos2 + 100, al_map_rgb(0, 0, 0)); //draw the second player
			al_draw_filled_rectangle(ballX, ballY, ballX+20, ballY+20, al_map_rgb(0, 0, 0)); //ball drawing
			//al_draw_textf(font, al_map_rgb(255, 255, 255), 390, 55, NULL, p1Score);
			al_flip_display(); //flip everything from memory to gamescreen
		}//end render


	}//end game loop

	//clean up memory
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);

	return 0;
}

